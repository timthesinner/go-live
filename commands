 //Decent Quality 4.1
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -re -i pipe: -c:v libvpx -c:a libvorbis -f webm -b:v 1250k -speed 10 -threads 10 -vf scale=-1:576 output.webm

//Less pixilation in action scenes than the first command, right at the edge of the server's capabilities
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -i pipe: -c:v libvpx -c:a libvorbis -f webm -b:v 2000k -speed 10 -threads 3 -vf scale=-1:600 output.webm

//Good visual quality, having some audio sync issues though
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -i pipe: -c:v libvpx -c:a libvorbis -f webm -b:v 2200k -speed 10 -threads 3 -vf scale=-1:600 output.webm

//Good visual quality, using opus removed audio sync issues
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -i pipe: -c:v libvpx -b:v 2200k -speed 10 -threads 4 -vf scale=-1:625 -c:a libopus -b:a 96k -af aformat=channel_layouts="7.1|5.1|stereo" output.webm

//Starting to play with audio stream
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -i pipe: -f dshow -i audio="Microphone (High Definition Aud" -c:v libvpx -b:v 2200k -speed 10 -threads 4 -vf scale=-1:625 -c:a libopus -b:a 96k -af aformat=channel_layouts="7.1|5.1|stereo" output.webm

//Combine live audio and tv broadcast
piper.exe | C:\ffmpeg\bin\ffmpeg.exe -i pipe: -f dshow -i audio="Microphone (High Definition Aud" -c:v libvpx -b:v 2200k -speed 10 -threads 4 -vf scale=-1:625 -c:a libopus -b:a 96k -af "aformat=channel_layouts='7.1|5.1|stereo', aresample=resampler=soxr" -map 0:v:0 -map 1:a:0 -r 30 output.webm

//Need to build a sliding (configurable) window around the audio stream.
// Going to have to be a TCP streaming server because we are using the pipe for the video
// C:\ffmpeg\bin\ffmpeg.exe -f dshow -i audio="Microphone (High Definition Aud" -c:a libopus -b:a 96k -f opus pipe:1
// Pipe the output stream through a filter window looking for 0x4F 0x67 0x67 0x53 (OggS)
// Adjust the time by dynamically configuring the # of OggS packets held in the buffer

//Listing direct show devices
C:\ffmpeg\bin\ffmpeg.exe -list_devices true -f dshow -i dummy-
